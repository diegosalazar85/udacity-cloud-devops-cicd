# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  print_pipeline_id:
    description: Prints Circle CI Workflow ID
    steps:
      - run: |
          echo $CIRCLE_WORKFLOW_ID
  destroy_environment:
    description: Destroy environment
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    steps:
      - run: 
          name: Destroy environment
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>
          when: on_fail

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  print_hello:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Print Hello"
          command: "echo Hello"

  print_world:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Print World"
          command: "echo World"

  print_name:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Echo owner name from Environment Variable"
          command: |
            echo $OWNER

  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Save Hello World to file"
          command: |
            echo "Hello World" > output.txt
      - persist_to_workspace:
          root: .
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Print output from file"
          command: |
            cat output.txt

  print_workflow_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id

  throw_and_handle_error:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run: 
          name: "On Error"
          command: |
            echo Hello Error!
          when: on_fail

  create_infrastructure_using_orb:
    executor: aws-cli/default
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - run: 
          name: Deploy Cloudformation Template
          command: |
            aws cloudformation deploy \
            --template template.yml \
            --stack << parameters.stack-name >>

  create_infrastructure_using_docker_image:
    docker:
      - image: amazon/aws-cli
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    steps:
      - checkout
      - run: 
          name: Deploy Cloudformation Template
          command: |
            aws cloudformation deploy \
            --template template.yml \
            --stack << parameters.stack-name >

  configure_infrastructure:
    docker:
      - image: python:3.7.6-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "44:6f:bb:68:d8:89:a9:bb:46:85:08:01:57:39:e2:38"
      - run:
          name: Install dependencies
          command: | 
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory playbook.yml

  health_check:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run: 
          name: Health Check
          command: |
            if curl -s --head "https://blog.udacity.com"
            then
              echo "It worked!"
            else
              echo "It failed"
              return 1
            fi

  simulate_error:
    docker:
      - image: amazon/aws-cli
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    steps:
      - checkout
      - run: 
          name: simulate error
          command: |
            return 1
      - destroy_environment:
          stack-name: << parameters.stack-name >>

  create_infrastructure:
    executor: aws-cli/default
    parameters:
      stack-name:
        description: Name of the CloudFormation stack
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - run: 
          name: Deploy Cloudformation Template
          command: |
            aws cloudformation deploy \
            --template template.yml \
            --stack << parameters.stack-name >>
      - run: |
          return 1
      - destroy_environment:
          stack-name: << parameters.stack-name >>

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: |
          aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate \
            --output text \
            > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
  
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
            # aws cloudformation delete-stack --stack-name production-distro 
            # aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
            # aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # say-hello-workflow:
  #   jobs:
  #     - print_hello
  #     - print_world:
  #         requires:
  #           - print_hello
  # test-environment-variables:
  #   jobs:
  #     - print_name
  # hello-world-workspace:
  #   jobs:
  #     - save_hello_world_output
  #     - print_output_file:
  #         requires:
  #           - save_hello_world_output
  # print_workflow_id:
  #   jobs:
  #     - print_workflow_id
  # error_handling:
  #   jobs:
  #     - throw_and_handle_error
  # aws-cli:
  #   jobs:
  #     # - create_infrastructure_using_orb:
  #     #     stack-name: My-Application-<< pipeline.id >>
  #     - create_infrastructure_using_docker_image:
  #         stack-name: My-Application-<< pipeline.id >>
  # deploy:
  #   jobs: 
  #     - configure_infrastructure
  # smoke_test:
  #   jobs:
  #     - configure_infrastructure
  #     - health_check:
  #         requires:
  #           - configure_infrastructure
  # rollback_jobs:
  #   jobs:
  #     - create_infrastructure_using_orb:
  #         stack-name: My-Application-<< pipeline.id >>
  #     - simulate_error:
  #         stack-name: My-Application-<< pipeline.id >>
  #         requires:
  #           - create_infrastructure_using_orb
  # rollback_exercise:
  #   jobs:
  #     - create_infrastructure:
  #         stack-name: My-Application-<< pipeline.id >>
  promote_to_production:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - promote_to_production
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id